// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// c_nnls
arma::mat c_nnls(arma::mat& A, arma::sp_mat& B, arma::mat X, const arma::vec& values, unsigned int threads, const double min, const double max, const unsigned int maxit, const double tol, double L0, double L1, double L2, double PE, const bool exact, const bool cd);
RcppExport SEXP _fastnmf_c_nnls(SEXP ASEXP, SEXP BSEXP, SEXP XSEXP, SEXP valuesSEXP, SEXP threadsSEXP, SEXP minSEXP, SEXP maxSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP L0SEXP, SEXP L1SEXP, SEXP L2SEXP, SEXP PESEXP, SEXP exactSEXP, SEXP cdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const double >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double >::type max(maxSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type L0(L0SEXP);
    Rcpp::traits::input_parameter< double >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< double >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< double >::type PE(PESEXP);
    Rcpp::traits::input_parameter< const bool >::type exact(exactSEXP);
    Rcpp::traits::input_parameter< const bool >::type cd(cdSEXP);
    rcpp_result_gen = Rcpp::wrap(c_nnls(A, B, X, values, threads, min, max, maxit, tol, L0, L1, L2, PE, exact, cd));
    return rcpp_result_gen;
END_RCPP
}
// c_sample_loss
Rcpp::List c_sample_loss(const arma::mat& w, const arma::vec& d, const arma::mat& h, arma::sp_mat& A, const double L1_w, const double L1_h, const double L2_w, const double L2_h, const double PE_w, const double PE_h, const unsigned int loss_type, const unsigned int threads);
RcppExport SEXP _fastnmf_c_sample_loss(SEXP wSEXP, SEXP dSEXP, SEXP hSEXP, SEXP ASEXP, SEXP L1_wSEXP, SEXP L1_hSEXP, SEXP L2_wSEXP, SEXP L2_hSEXP, SEXP PE_wSEXP, SEXP PE_hSEXP, SEXP loss_typeSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type L1_w(L1_wSEXP);
    Rcpp::traits::input_parameter< const double >::type L1_h(L1_hSEXP);
    Rcpp::traits::input_parameter< const double >::type L2_w(L2_wSEXP);
    Rcpp::traits::input_parameter< const double >::type L2_h(L2_hSEXP);
    Rcpp::traits::input_parameter< const double >::type PE_w(PE_wSEXP);
    Rcpp::traits::input_parameter< const double >::type PE_h(PE_hSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type loss_type(loss_typeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_sample_loss(w, d, h, A, L1_w, L1_h, L2_w, L2_h, PE_w, PE_h, loss_type, threads));
    return rcpp_result_gen;
END_RCPP
}
// c_nmf
Rcpp::List c_nmf(arma::sp_mat& A, const unsigned int k, const double min_w, const double min_h, const double max_w, const double max_h, const unsigned int cd_maxit, const double cd_tol, const double L0_w, const double L0_h, const double L1_w, const double L1_h, const double L2_w, const double L2_h, const double PE_w, const double PE_h, const bool exact_h, const bool exact_w, const bool cd_w, const bool cd_h, unsigned int maxit, const double tol_wh, const unsigned int threads, const bool diag, const bool verbose, const bool full_path, const double loss, const double tol_loss, const unsigned int trace);
RcppExport SEXP _fastnmf_c_nmf(SEXP ASEXP, SEXP kSEXP, SEXP min_wSEXP, SEXP min_hSEXP, SEXP max_wSEXP, SEXP max_hSEXP, SEXP cd_maxitSEXP, SEXP cd_tolSEXP, SEXP L0_wSEXP, SEXP L0_hSEXP, SEXP L1_wSEXP, SEXP L1_hSEXP, SEXP L2_wSEXP, SEXP L2_hSEXP, SEXP PE_wSEXP, SEXP PE_hSEXP, SEXP exact_hSEXP, SEXP exact_wSEXP, SEXP cd_wSEXP, SEXP cd_hSEXP, SEXP maxitSEXP, SEXP tol_whSEXP, SEXP threadsSEXP, SEXP diagSEXP, SEXP verboseSEXP, SEXP full_pathSEXP, SEXP lossSEXP, SEXP tol_lossSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type min_w(min_wSEXP);
    Rcpp::traits::input_parameter< const double >::type min_h(min_hSEXP);
    Rcpp::traits::input_parameter< const double >::type max_w(max_wSEXP);
    Rcpp::traits::input_parameter< const double >::type max_h(max_hSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type cd_maxit(cd_maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type cd_tol(cd_tolSEXP);
    Rcpp::traits::input_parameter< const double >::type L0_w(L0_wSEXP);
    Rcpp::traits::input_parameter< const double >::type L0_h(L0_hSEXP);
    Rcpp::traits::input_parameter< const double >::type L1_w(L1_wSEXP);
    Rcpp::traits::input_parameter< const double >::type L1_h(L1_hSEXP);
    Rcpp::traits::input_parameter< const double >::type L2_w(L2_wSEXP);
    Rcpp::traits::input_parameter< const double >::type L2_h(L2_hSEXP);
    Rcpp::traits::input_parameter< const double >::type PE_w(PE_wSEXP);
    Rcpp::traits::input_parameter< const double >::type PE_h(PE_hSEXP);
    Rcpp::traits::input_parameter< const bool >::type exact_h(exact_hSEXP);
    Rcpp::traits::input_parameter< const bool >::type exact_w(exact_wSEXP);
    Rcpp::traits::input_parameter< const bool >::type cd_w(cd_wSEXP);
    Rcpp::traits::input_parameter< const bool >::type cd_h(cd_hSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_wh(tol_whSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool >::type full_path(full_pathSEXP);
    Rcpp::traits::input_parameter< const double >::type loss(lossSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_loss(tol_lossSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(c_nmf(A, k, min_w, min_h, max_w, max_h, cd_maxit, cd_tol, L0_w, L0_h, L1_w, L1_h, L2_w, L2_h, PE_w, PE_h, exact_h, exact_w, cd_w, cd_h, maxit, tol_wh, threads, diag, verbose, full_path, loss, tol_loss, trace));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastnmf_c_nnls", (DL_FUNC) &_fastnmf_c_nnls, 15},
    {"_fastnmf_c_sample_loss", (DL_FUNC) &_fastnmf_c_sample_loss, 12},
    {"_fastnmf_c_nmf", (DL_FUNC) &_fastnmf_c_nmf, 29},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastnmf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
